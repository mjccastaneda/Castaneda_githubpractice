In Getting a Git Repository:
1. Initialize a Repository in an Existing Directory
      - git init
      
 1.1. If you want to start version-controlling on existing files rather than empty directory:
      - git add *.c
      - git add LICENSE
      - git commit -m 'initial project version'

2. Cloning an Existing Repository
 * If you want to clone the Git linkable library called libgit3, you can do so like this:
      - git clone https://github.com/libgit3/libgit3
 * If you want to clone the repository into a directory named other than libgi3, you can do so like this:
      - git clone https://github.com/libgit3/libgi3 mylibgit3
----------------------------------------------------------------------------------------------------------------------
In Recording Changes to the Repository:
1. Checking the Status of Your Files
      - git status
        ~ This will display:
            On branch master
            nothing to commit, working directory clean
   If you add a new file to your project, for example README file. If the file didn't exist before, it is untracked:
      - echo 'My Project' > README
      - git status
         ~ This will display:
             On branch master
             Untracked files:
             (use "git add <file>..." to include in what will be committed)

                README

             nothing added to commit but untracked files present (use "git add" to track)

2. Tracking New Files
    * To begin tracking the README file, simply do:
      - git add README
    * When you run the status (git status), this will display:
      On branch master
      Changes to be committed:
      (use "git reset HEAD <file>..." to unstage)

        new file:   README

3. Staging Modified Files
    * If you change a previously tracked file called "chptr2.md" and run git status, you'll get this:
      On branch master
      Changes to be committed:
      (use "git reset HEAD <file>..." to unstage)

        new file:   README

      Changes not staged for commit:
      (use "git add <file>..." to update what will be committed)
      (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   chptr2.md
        
    * The above status states that a file that is tracked has been modified but not yet staged. To stage, simply do:
      git add chptr2.md; 
      and when you run git status, you'll see this:
       On branch master
       Changes to be committed:
       (use "git reset HEAD <file>..." to unstage)

         new file:   README
         modified:   chptr2.md
    * If you want to make changes to "chptr2.md", do vim chptr2.md and add it again.

4. Short Status
    * To get a status of your changes in a more compact way, do:
      - git status -s
    * This will display:
        M README
        MM Rakefile
        A  lib/git.rb
        M  lib/simplegit.rb
        ?? LICENSE.txt

5. Ignoring Files
    * To ignore files, simply do:
      - cat .gitignore
    * It would display something like this:
        *.[oa] (It means that it will ignore all files ending in ".o" or ".a"
        *~ (It means that it will ignore all files ending with a tilde)

6. Viewing Your Staged and Unstaged Changes
    * If git status is too vague, use git diff

7. Committing Your Changes
    * To commit your changes, simply type:
      - git commit
    * To type your own commit message, it must be after -m flag, like this:
      - git commit -m "Story 1182: Fix benchmarks for speed"
      
8. Skipping the Staging Area
    * To skip the staging area, simple put an -a flag, like this:
      - git commit -a -m 'added new skins'
      
9. Removing Files
    * To remove files using "rm PROJECTS.md", it shows up under the "Changed but not updated", then if you run "git rm", it stages the file's removal.

10. Moving Files
    * To move files, simply do:
      - git mv file_from file_to (git mv README.md README)
    * Git considers it a renamed file, which is equivalent to running something like this:
      - mv README.md README
      - git rm README.md
      - git add README
----------------------------------------------------------------------------------------------------------------------
In Viewing the Commit History:
* Run "git log" and you should see something like this:
      commit ca82a6dff817ec66f44342007202690a93763949
      Author: Scott Chacon <schacon@gee-mail.com>
      Date:   Mon Mar 17 21:52:11 2008 -0700

      changed the version number

      commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
      Author: Scott Chacon <schacon@gee-mail.com>
      Date:   Sat Mar 15 16:40:33 2008 -0700
      
          removed unnecessary test
      
      commit a11bef06a3f659402fe7563abf99ad00de2209e6
      Author: Scott Chacon <schacon@gee-mail.com>
      Date:   Sat Mar 15 10:31:28 2008 -0700
      
          first commit

* Here are the git log format:
      %H - Commit hash
      %h - Abbreviated commit hash
      %T - Tree hash
      %t - Abbreviated tree hash
      %P - Parent hashes
      %p - Abbreviated Parent hashes
      %an - Author name
      %ae - Author e-mail
      %ad - Author date (format respects the --date=option)
      %ar - Author date, relative
      %cn - Committer name
      %ce - Committer e-mail
      %cd - Committer date
      %cr - Committer date, relative
      %s - Subject
* Another:
      -p - Show the patch introduced with each commit.
      --stat - Show statistics for files modified in each commit.
      --shortstat - Display only the changed/insertions/deletions line from the --stat command.
      --name-only - Show the list of files modified after the commit information.
      --name-status - Show the list of files affected with added/modified/deleted information as well.
      --abbrev-commit - Show only the first few characters of the SHA-1 checksum instead of all 40.
      --relative-date - Display the date in a relative format (for example, “2 weeks ago”) instead of using the full                          date format.
      --graph - Display an ASCII graph of the branch and merge history beside the log output.
      --pretty - Show commits in an alternate format. Options include oneline, short, full, fuller, and format (where                   you specify your own format).

1. Limiting Log Output:
      -(n) - Show only the last n commits
      --since, --after - Limit the commits to those made after the specified date.
      --until, --before - Limit the commits to those made before the specified date.
      --author - Only show commits in which the author entry matches the specified string.
      --committer - Only show commits in which the committer entry matches the specified string.
      --grep - Only show commits with a commit message containing the string
      -S - Only show commits adding or removing code matching the string
----------------------------------------------------------------------------------------------------------------------
In Undoing Things:
- git commit --amend

1. Unstaging a Stage File
- git reset HEAD <file> (git reset HEAD README.txt)

2. Unmodifying a Modified File
- git checkout -- <file> (git checkout -- README.txt)
----------------------------------------------------------------------------------------------------------------------
In Working with Remotes:
1. Showing Your Remotes
 - git remote
 - git remote -v (-v shows the URLs that Git has stored for the shortname to be used when reading and writing to that                   remote)
 
 2. Adding Remote Repositories
 - git remote add [shortname] [url] (git remote add pb https://github.com/paulboone/ticgit)
 
 3. Fetching and Pulling from Your Remotes
 - git fetch [remote-name] (git fetch pb)
 
 4. Pushing to your Remotes
 - git push origin master
 
 5. Inspecting a Remote
 - git remote show origin
 
 6. Removing and Renaming Remotes
 - git remote rename pb paul
 - git remote
  * Remove a remote for some reason, do:
    - git remote rm paul
    - git remote
----------------------------------------------------------------------------------------------------------------------
In Tagging:
1. Listing Your Tags
- git tag or git tag -1 'v1.8.5*'

2. Annotated Tags
- git tag -a v1.4 -m "my version 1.4"
- git tag

3. Lightweight Tags
- git tag v1.4-lw
- git tag

4. Tagging Later
- git tag -a v1.2 9fceb02 (9fceb02[although it is randomed] can be seen on "git log --pretty=oneline")
- git push origin v1.5 or git push origin --tags if you want to push lots of tags at once.

5. Checking out Tags
- git checkout -b version2 v2.0.0
----------------------------------------------------------------------------------------------------------------------
In Aliases:
To setup, do:
- git config --global alias.co checkout
- git config --global alias.br branch
- git config --global alias.ci commit
- git config --global alias.st status

To add unstage alias to Git, do:
- git config --global alias.unstage 'reset HEAD --'
Above is equivalent to:
- git unstage fileA
- git reset HEAD fileA

A bit clearer and also it is common to add last like this:
- git config --global alias.last 'log -1 HEAD' (by that you can see your last commit easily through "git last")

If you want to run an external command, rather than Git subcommand, start with ! like this:
- git config --global alias.visual "!gitk"
